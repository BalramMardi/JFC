{"version":3,"file":"static/js/526.4e310293.chunk.js","mappings":"4KAEA,MAkDA,EAlDmBA,IACjB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,MAAEC,EAAK,aAAEC,EAAY,SAAEC,EAAQ,GAAEC,KAAOC,GAAeR,EAM7D,OACES,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACEC,UAAU,oDACVC,QAASN,EAAGG,SAEXN,KAEHO,EAAAA,EAAAA,KAAA,YACMH,EACJD,GAAIA,EACJK,UAAS,yMAAAE,OACPb,GACAO,EAAWO,UACV,IAAIC,OAAOR,EAAWO,SAASE,KAAKT,EAAWU,OAC5C,iDACA,IAENZ,SAAUA,EACVa,OAvBeC,IACnBlB,GAAW,EAAK,EAuBZmB,QAASA,IACa,oBAApBb,EAAWc,MAA8BpB,GAAW,GAEtDD,QAASA,EAAQsB,cAEnBZ,EAAAA,EAAAA,KAAA,QACEC,UAAU,4BACVY,MAAO,CACLC,QACExB,GACAO,EAAWO,UACV,IAAIC,OAAOR,EAAWO,SAASE,KAAKT,EAAWU,OAC5C,QACA,QACNR,SAEDL,MAEC,ECiFV,EA3HiBqB,KACf,MAAOC,EAAQC,IAAazB,EAAAA,EAAAA,UAAS,CACnCmB,KAAM,GACNO,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,MAAO,GACPC,OAAQ,KAGJC,GAAWC,EAAAA,EAAAA,MAEXC,EAAS,CACb,CACE7B,GAAI,EACJe,KAAM,OACNe,KAAM,OACNC,YAAa,YACbjC,aAAc,kDACdD,MAAO,YACPW,QAAS,sBACTwB,UAAU,GAEZ,CACEhC,GAAI,EACJe,KAAM,QACNe,KAAM,QACNC,YAAa,QACbjC,aAAc,sCACdD,MAAO,QACPW,QAAS,oDACTwB,UAAU,GAEZ,CACEhC,GAAI,EACJe,KAAM,QACNe,KAAM,OACNC,YAAa,eACbjC,aAAc,oCACdD,MAAO,eACPW,QAAS,cACTwB,UAAU,GAEZ,CACEhC,GAAI,EACJe,KAAM,WACNe,KAAM,WACNC,YAAa,WACbjC,aACE,uGACFD,MAAO,WACPW,QAAQ,uEACRwB,UAAU,GAEZ,CACEhC,GAAI,EACJe,KAAM,kBACNe,KAAM,WACNC,YAAa,mBACbjC,aAAc,yBACdD,MAAO,mBACPW,QAASY,EAAOG,SAChBS,UAAU,GAEZ,CACEhC,GAAI,EACJe,KAAM,SACNe,KAAM,OACNC,YAAa,uBACbjC,aAAc,4BACdD,MAAO,kBACPmC,UAAU,IAcRjC,EAAYc,IAChBQ,EAAU,IAAKD,EAAQ,CAACP,EAAEoB,OAAOlB,MAAOF,EAAEoB,OAAOtB,OAAQ,EAG3D,OACET,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mEAAkEF,SAAA,EAC/ED,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mCAAkCF,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,OACEC,UAAU,sBACV6B,IAAI,gHACJC,IAAI,kBAEN/B,EAAAA,EAAAA,KAAA,MAAIC,UAAU,8EAA6EF,SAAC,iBAI9FC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yCAAwCF,UACrDD,EAAAA,EAAAA,MAAA,QAAMG,UAAU,YAAY+B,SA3BZvB,IACpBA,EAAEwB,iBAKFC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,IAAapB,IAC5BO,EAAS,WAAW,EAoBmCxB,SAAA,CAChD0B,EAAOY,KAAKC,IACXtC,EAAAA,EAAAA,KAACuC,EAAS,IAEJD,EACJ/B,MAAOS,EAAOsB,EAAM3B,MACpBhB,SAAUA,GAHL2C,EAAM1C,OAMfI,EAAAA,EAAAA,KAAA,UACE0B,KAAK,SACLzB,UAAU,yPAAwPF,SACnQ,oBAKD,C","sources":["pages/Auth/FormInput.js","pages/Auth/Register.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst FormInput = (props) => {\r\n  const [focused, setFocused] = useState(false);\r\n  const { label, errorMessage, onChange, id, ...inputProps } = props;\r\n\r\n  const handleFocus = (e) => {\r\n    setFocused(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label\r\n        className=\"block text-sm font-medium leading-6 text-gray-100\"\r\n        htmlFor={id}\r\n      >\r\n        {label}\r\n      </label>\r\n      <input\r\n        {...inputProps}\r\n        id={id}\r\n        className={`block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 ${\r\n          focused &&\r\n          inputProps.pattern &&\r\n          !new RegExp(inputProps.pattern).test(inputProps.value)\r\n            ? \"border-red-500 ring-red-500 focus:ring-red-500\"\r\n            : \"\"\r\n        }`}\r\n        onChange={onChange}\r\n        onBlur={handleFocus}\r\n        onFocus={() =>\r\n          inputProps.name === \"confirmPassword\" && setFocused(true)\r\n        }\r\n        focused={focused.toString()}\r\n      />\r\n      <span\r\n        className=\"text-xs text-red-500 mt-2\"\r\n        style={{\r\n          display:\r\n            focused &&\r\n            inputProps.pattern &&\r\n            !new RegExp(inputProps.pattern).test(inputProps.value)\r\n              ? \"block\"\r\n              : \"none\",\r\n        }}\r\n      >\r\n        {errorMessage}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport store from \"../../redux/store\";\r\nimport { userRegister } from \"../../redux/features/Auth/AuthAction\";\r\nimport FormInput from \"./FormInput\";\r\n\r\nconst Register = () => {\r\n  const [values, setValues] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    phone: \"\",\r\n    answer: \"\",\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const inputs = [\r\n    {\r\n      id: 1,\r\n      name: \"name\",\r\n      type: \"text\",\r\n      placeholder: \"Full Name\",\r\n      errorMessage: \"Name is required and should be 3-16 characters!\",\r\n      label: \"Full Name\",\r\n      pattern: \"^[A-Za-z0-9]{3,16}$\",\r\n      required: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"email\",\r\n      type: \"email\",\r\n      placeholder: \"Email\",\r\n      errorMessage: \"It should be a valid email address!\",\r\n      label: \"Email\",\r\n      pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\",\r\n      required: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"phone\",\r\n      type: \"text\",\r\n      placeholder: \"Phone Number\",\r\n      errorMessage: \"Phone number should be 10 digits!\",\r\n      label: \"Phone Number\",\r\n      pattern: \"^[0-9]{10}$\",\r\n      required: true,\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"password\",\r\n      type: \"password\",\r\n      placeholder: \"Password\",\r\n      errorMessage:\r\n        \"Password should be 8-20 characters and include at least 1 letter, 1 number, and 1 special character!\",\r\n      label: \"Password\",\r\n      pattern: `^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,20}$`,\r\n      required: true,\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"confirmPassword\",\r\n      type: \"password\",\r\n      placeholder: \"Confirm Password\",\r\n      errorMessage: \"Passwords don't match!\",\r\n      label: \"Confirm Password\",\r\n      pattern: values.password, // Ensures it matches the password\r\n      required: true,\r\n    },\r\n    {\r\n      id: 6,\r\n      name: \"answer\",\r\n      type: \"text\",\r\n      placeholder: \"Your Favourite Sport\",\r\n      errorMessage: \"Please provide an answer!\",\r\n      label: \"Favourite Sport\",\r\n      required: true,\r\n    },\r\n  ];\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* if (values.password !== values.confirmPassword) {\r\n      alert(\"Passwords do not match!\");\r\n      return;\r\n    } */\r\n    store.dispatch(userRegister(values));\r\n    navigate(\"/success\");\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setValues({ ...values, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-full flex flex-col justify-center px-6 py-12 lg:px-8 mt-28\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n        <img\r\n          className=\"mx-auto h-20 w-auto\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/en/thumb/5/57/Jamshedpur_FC_logo.svg/1200px-Jamshedpur_FC_logo.svg.png\"\r\n          alt=\"Your Company\"\r\n        />\r\n        <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-100\">\r\n          Register\r\n        </h2>\r\n      </div>\r\n      <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n        <form className=\"space-y-6\" onSubmit={handleSubmit}>\r\n          {inputs.map((input) => (\r\n            <FormInput\r\n              key={input.id}\r\n              {...input}\r\n              value={values[input.name]}\r\n              onChange={onChange}\r\n            />\r\n          ))}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n          >\r\n            Register\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["props","focused","setFocused","useState","label","errorMessage","onChange","id","inputProps","_jsxs","children","_jsx","className","htmlFor","concat","pattern","RegExp","test","value","onBlur","e","onFocus","name","toString","style","display","Register","values","setValues","email","password","confirmPassword","phone","answer","navigate","useNavigate","inputs","type","placeholder","required","target","src","alt","onSubmit","preventDefault","store","dispatch","userRegister","map","input","FormInput"],"sourceRoot":""}